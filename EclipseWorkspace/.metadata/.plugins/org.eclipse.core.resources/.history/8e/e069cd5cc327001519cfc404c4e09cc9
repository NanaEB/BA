	package fsm.diagram.part;

	/**
 * @generated
 */
public class FsmDiagramUpdater {
		
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.FsmVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.FSMEditPart.VISUAL_ID:
	return getFSM_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmNodeDescriptor> getFSM_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
fsm.FSM modelElement = (fsm.FSM) view.getElement();
	java.util.LinkedList<fsm.diagram.part.FsmNodeDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getStates().iterator(); it.hasNext();) {
		fsm.State childElement = (fsm.State) it.next();
					int visualID = fsm.diagram.part.FsmVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == fsm.diagram.edit.parts.TransientStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.FsmNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.FsmNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == fsm.diagram.edit.parts.SteadyStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.FsmNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.FsmVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.FSMEditPart.VISUAL_ID:
	return getFSM_1000ContainedLinks(view);
case fsm.diagram.edit.parts.TransientStateEditPart.VISUAL_ID:
	return getTransientState_2002ContainedLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2003ContainedLinks(view);
case fsm.diagram.edit.parts.SteadyStateEditPart.VISUAL_ID:
	return getSteadyState_2004ContainedLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.FsmVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.TransientStateEditPart.VISUAL_ID:
	return getTransientState_2002IncomingLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2003IncomingLinks(view);
case fsm.diagram.edit.parts.SteadyStateEditPart.VISUAL_ID:
	return getSteadyState_2004IncomingLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.FsmVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.TransientStateEditPart.VISUAL_ID:
	return getTransientState_2002OutgoingLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2003OutgoingLinks(view);
case fsm.diagram.edit.parts.SteadyStateEditPart.VISUAL_ID:
	return getSteadyState_2004OutgoingLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getFSM_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransientState_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.TransientState modelElement = (fsm.TransientState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getInitialState_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getSteadyState_2004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.SteadyState modelElement = (fsm.SteadyState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransition_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransientState_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.TransientState modelElement = (fsm.TransientState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getInitialState_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getSteadyState_2004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.SteadyState modelElement = (fsm.SteadyState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransition_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransientState_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.TransientState modelElement = (fsm.TransientState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getInitialState_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getSteadyState_2004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.SteadyState modelElement = (fsm.SteadyState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.FsmLinkDescriptor> getTransition_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.FsmLinkDescriptor> getContainedTypeModelFacetLinks_Transition_4001(fsm.State container) {
	java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getOutgoingTransition().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof fsm.Transition) {
		continue;
	}
	fsm.Transition link = (fsm.Transition) linkObject;
		if (fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID != fsm.diagram.part.FsmVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			fsm.State dst = link.getSource();
						result.add(new fsm.diagram.part.FsmLinkDescriptor(container, dst, link, fsm.diagram.providers.FsmElementTypes.Transition_4001, fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.FsmLinkDescriptor> getIncomingTypeModelFacetLinks_Transition_4001(fsm.State target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.FsmLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != fsm.FsmPackage.eINSTANCE.getTransition_Source() || false == setting.getEObject() instanceof fsm.Transition) {
	continue;
}
fsm.Transition link = (fsm.Transition) setting.getEObject();
	if (fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID != fsm.diagram.part.FsmVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			if (false == link.eContainer() instanceof fsm.State) {
	continue;
}
fsm.State container = (fsm.State) link.eContainer();
		result.add(new fsm.diagram.part.FsmLinkDescriptor(container, target, link, fsm.diagram.providers.FsmElementTypes.Transition_4001, fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID));

		}
	return result;	
}
		
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.FsmNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return FsmDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.FsmLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FsmDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.FsmLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FsmDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.FsmLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FsmDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
