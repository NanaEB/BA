	package fsm.diagram.part;

	/**
 * @generated
 */
public class StatemachineDiagramUpdater {
		
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.StatemachineVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.StateMachineEditPart.VISUAL_ID:
	return getStateMachine_1000SemanticChildren(view);
case fsm.diagram.edit.parts.NormalStateNormalStateEntryCompartmentEditPart.VISUAL_ID:
	return getNormalStateNormalStateEntryCompartment_7001SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineNodeDescriptor> getStateMachine_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
fsm.StateMachine modelElement = (fsm.StateMachine) view.getElement();
	java.util.LinkedList<fsm.diagram.part.StatemachineNodeDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getDeclarations().iterator(); it.hasNext();) {
		fsm.Declaration childElement = (fsm.Declaration) it.next();
					int visualID = fsm.diagram.part.StatemachineVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == fsm.diagram.edit.parts.NormalStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.StatemachineNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.StatemachineNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == fsm.diagram.edit.parts.FinalStateEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.StatemachineNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getMachineVariables().iterator(); it.hasNext();) {
		fsm.StateMachineVariable childElement = (fsm.StateMachineVariable) it.next();
					int visualID = fsm.diagram.part.StatemachineVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == fsm.diagram.edit.parts.StateMachineVariableEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.StatemachineNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineNodeDescriptor> getNormalStateNormalStateEntryCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
fsm.NormalState modelElement = (fsm.NormalState) containerView.getElement();
	java.util.LinkedList<fsm.diagram.part.StatemachineNodeDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineNodeDescriptor>();
						{ fsm.Action childElement = modelElement.getEntry();
					int visualID = fsm.diagram.part.StatemachineVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == fsm.diagram.edit.parts.ActionEditPart.VISUAL_ID) {
	result.add(new fsm.diagram.part.StatemachineNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.StatemachineVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.StateMachineEditPart.VISUAL_ID:
	return getStateMachine_1000ContainedLinks(view);
case fsm.diagram.edit.parts.NormalStateEditPart.VISUAL_ID:
	return getNormalState_2001ContainedLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2002ContainedLinks(view);
case fsm.diagram.edit.parts.FinalStateEditPart.VISUAL_ID:
	return getFinalState_2003ContainedLinks(view);
case fsm.diagram.edit.parts.StateMachineVariableEditPart.VISUAL_ID:
	return getStateMachineVariable_2004ContainedLinks(view);
case fsm.diagram.edit.parts.ActionEditPart.VISUAL_ID:
	return getAction_3001ContainedLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.StatemachineVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.NormalStateEditPart.VISUAL_ID:
	return getNormalState_2001IncomingLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2002IncomingLinks(view);
case fsm.diagram.edit.parts.FinalStateEditPart.VISUAL_ID:
	return getFinalState_2003IncomingLinks(view);
case fsm.diagram.edit.parts.StateMachineVariableEditPart.VISUAL_ID:
	return getStateMachineVariable_2004IncomingLinks(view);
case fsm.diagram.edit.parts.ActionEditPart.VISUAL_ID:
	return getAction_3001IncomingLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (fsm.diagram.part.StatemachineVisualIDRegistry.getVisualID(view)) {
		case fsm.diagram.edit.parts.NormalStateEditPart.VISUAL_ID:
	return getNormalState_2001OutgoingLinks(view);
case fsm.diagram.edit.parts.InitialStateEditPart.VISUAL_ID:
	return getInitialState_2002OutgoingLinks(view);
case fsm.diagram.edit.parts.FinalStateEditPart.VISUAL_ID:
	return getFinalState_2003OutgoingLinks(view);
case fsm.diagram.edit.parts.StateMachineVariableEditPart.VISUAL_ID:
	return getStateMachineVariable_2004OutgoingLinks(view);
case fsm.diagram.edit.parts.ActionEditPart.VISUAL_ID:
	return getAction_3001OutgoingLinks(view);
case fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getStateMachine_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.StateMachine modelElement = (fsm.StateMachine) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getNormalState_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.NormalState modelElement = (fsm.NormalState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getInitialState_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getFinalState_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.FinalState modelElement = (fsm.FinalState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getStateMachineVariable_2004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getAction_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getTransition_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getNormalState_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.NormalState modelElement = (fsm.NormalState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	result.addAll(getIncomingFeatureModelFacetLinks_State_Reachable_4002(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getInitialState_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	result.addAll(getIncomingFeatureModelFacetLinks_State_Reachable_4002(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getFinalState_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.FinalState modelElement = (fsm.FinalState) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	result.addAll(getIncomingFeatureModelFacetLinks_State_Reachable_4002(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getStateMachineVariable_2004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getAction_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getTransition_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getNormalState_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.NormalState modelElement = (fsm.NormalState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getInitialState_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.InitialState modelElement = (fsm.InitialState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getFinalState_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	fsm.FinalState modelElement = (fsm.FinalState) view.getElement();
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	result.addAll(getOutgoingFeatureModelFacetLinks_State_Reachable_4002(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getStateMachineVariable_2004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getAction_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getTransition_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.StatemachineLinkDescriptor> getContainedTypeModelFacetLinks_Transition_4001(fsm.StateMachine container) {
	java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getDeclarations().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof fsm.Transition) {
		continue;
	}
	fsm.Transition link = (fsm.Transition) linkObject;
		if (fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID != fsm.diagram.part.StatemachineVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			fsm.State dst = link.getTarget();
							fsm.State src = link.getSource();
							result.add(new fsm.diagram.part.StatemachineLinkDescriptor(src, dst, link, fsm.diagram.providers.StatemachineElementTypes.Transition_4001, fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.StatemachineLinkDescriptor> getIncomingTypeModelFacetLinks_Transition_4001(fsm.State target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != fsm.FsmPackage.eINSTANCE.getTransition_Target() || false == setting.getEObject() instanceof fsm.Transition) {
	continue;
}
fsm.Transition link = (fsm.Transition) setting.getEObject();
	if (fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID != fsm.diagram.part.StatemachineVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				fsm.State src = link.getSource();
			result.add(new fsm.diagram.part.StatemachineLinkDescriptor(src, target, link, fsm.diagram.providers.StatemachineElementTypes.Transition_4001, fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.StatemachineLinkDescriptor> getIncomingFeatureModelFacetLinks_State_Reachable_4002(fsm.State target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() == fsm.FsmPackage.eINSTANCE.getState_Reachable()) {
	result.add(new fsm.diagram.part.StatemachineLinkDescriptor(setting.getEObject(), target, fsm.diagram.providers.StatemachineElementTypes.StateReachable_4002, fsm.diagram.edit.parts.StateReachableEditPart.VISUAL_ID));
}
	}
	return result;	
}
				
		/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.StatemachineLinkDescriptor> getOutgoingTypeModelFacetLinks_Transition_4001(fsm.State source) {
	fsm.StateMachine container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof fsm.StateMachine) {
			container = (fsm.StateMachine) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getDeclarations().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof fsm.Transition) {
		continue;
	}
	fsm.Transition link = (fsm.Transition) linkObject;
		if (fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID != fsm.diagram.part.StatemachineVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			fsm.State dst = link.getTarget();
							fsm.State src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new fsm.diagram.part.StatemachineLinkDescriptor(src, dst, link, fsm.diagram.providers.StatemachineElementTypes.Transition_4001, fsm.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}		
		
	/**
 * @generated
 */
private static java.util.Collection<fsm.diagram.part.StatemachineLinkDescriptor> getOutgoingFeatureModelFacetLinks_State_Reachable_4002(fsm.State source) {
	java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor> result = new java.util.LinkedList<fsm.diagram.part.StatemachineLinkDescriptor>();
		for (java.util.Iterator<?> destinations = source.getReachable().iterator(); destinations.hasNext();) {
		fsm.State destination = (fsm.State) destinations.next();
		result.add(new fsm.diagram.part.StatemachineLinkDescriptor(source, destination, fsm.diagram.providers.StatemachineElementTypes.StateReachable_4002, fsm.diagram.edit.parts.StateReachableEditPart.VISUAL_ID));
		}
		return result;
}
	
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.StatemachineNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return StatemachineDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return StatemachineDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return StatemachineDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<fsm.diagram.part.StatemachineLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return StatemachineDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
