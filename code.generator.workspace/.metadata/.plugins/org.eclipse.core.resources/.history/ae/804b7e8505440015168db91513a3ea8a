<xsl:stylesheet version='1.0'
	xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xmlns:fsm='http://www.kermeta.org/fsm'>












	<xsl:template match="fsm:FSM">
		<xsl:text disable-output-escaping="yes">
#define FSM_DEBUG      
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;omnetpp.h&gt;
		</xsl:text>
		
class FSM: public cSimpleModule{
	cFSM fsm;
	enum {	
			INIT = 0,
			<xsl:for-each  select="state[@xsi:type='fsm:SteadyState']">
			<xsl:value-of select="@name"/> = FSM_Steady(<xsl:value-of select="position()"/>),
			</xsl:for-each>
			<xsl:for-each  select="state[@xsi:type='fsm:TransientState']">
			<xsl:value-of select="@name"/> = FSM_Transient(<xsl:value-of select="position()"/>),
			</xsl:for-each>
 		 };

public:
    FSM();
    virtual ~FSM();

protected:
    virtual void initialize();
    virtual void handleMessage(cMessage *msg);
};

Define_Module(FSM);

FSM::FSM() {}

FSM::~FSM() {}

void Tic::initialize() {

    fsm.setName("fsm");

}


void FSM::handleMessage(cMessage *msg) {

	FSM_Switch(fsm){
		<xsl:apply-templates select="intialState" />
		<xsl:apply-templates select="state" />

	}
}		
		
	</xsl:template>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
<!--_______________________________________________________________________________________________-->
	<xsl:template match="intialState">
	<!-- fuer jede transition, eine if anweisung mit dem guard-action und target state ausgeben! -->                
		case FSM_Exit(INIT):	<xsl:for-each select="outTrans">  
	
			
			
			
			
								<xsl:variable name="guardValue" select="@Guard" />
								<xsl:value-of select="string-length($guardValue)" />
								<xsl:if test="string-length($guardValue) != 0">if(<xsl:value-of select="@Guard"/>){
								</xsl:if>
	
				 
	
								<!-- falls effect vorhanden .. ausgeben-->
								<xsl:choose>
								<xsl:when test="@Effect">//effect
								<xsl:value-of select="@Effect"/>;
								</xsl:when>
								</xsl:choose>
					
					
								<!-- hole target-state Name -->
								<xsl:variable name="tmpNameOfState" select='substring-after(@target, "&apos;")' /> <xsl:variable name="nameOfState" select='substring-before($tmpNameOfState, "&apos;")' />
			 	 				FSM_Goto(fsm, <xsl:value-of select="$nameOfState"/>);
								<xsl:choose>	<!-- if Anweisung schließen -->
								<xsl:when test="@Guard">}
								</xsl:when>
								</xsl:choose>
								</xsl:for-each>break;
	</xsl:template>
	




	
<!--_______________________________________________________________________________________________-->
	<xsl:template match="state">
		
			
		case FSM_Enter(<xsl:value-of select="@name"/>):
							break;
			 
		
		case FSM_Exit(<xsl:value-of select="@name"/>):	<xsl:for-each select="outTrans">  
	
			
			
			
								<xsl:variable name="guardValue" select="@Guard" />
								<xsl:value-of select="string-length($guardValue)" />
								<xsl:if test="string-length($guardValue) != 0">if(<xsl:value-of select="@Guard"/>){
								</xsl:if>
	
	
								<!-- falls effect vorhanden .. ausgeben-->
								<xsl:choose>
								<xsl:when test="@Effect">//effect
								<xsl:value-of select="@Effect"/>;
								</xsl:when>
								</xsl:choose>
					
					
								<!-- hole target-state Name -->
								<xsl:variable name="tmpNameOfState" select='substring-after(@target, "&apos;")' /> <xsl:variable name="nameOfState" select='substring-before($tmpNameOfState, "&apos;")' />
			 	 				FSM_Goto(fsm, <xsl:value-of select="$nameOfState"/>);
								<xsl:choose>	<!-- if Anweisung schließen -->
								<xsl:when test="@Guard">}
								</xsl:when>
								</xsl:choose>
								</xsl:for-each>break;
							break;
			 
			
	
</xsl:template>


<!--_______________________________________________________________________________________________
<xsl:template match="outTrans">

<xsl:value-of select="@target"/>


</xsl:template>-->


</xsl:stylesheet>
<!-- <xsl:template match="states"> public class <xsl:value-of select="@name"/>{} 
	<xsl:apply-templates select="outTrans" /> </xsl:template> <xsl:template match="outTrans"> 
	lala <xsl:value-of select="@input"/> </xsl:template> -->

